name: Easy Digital Downloads Updater

# Run this workflow twice daily
on:
  # schedule:
  #   - cron: '0 */12 * * *'
  workflow_dispatch:

env:

  # The Easy Digital Downloads Item ID (example: searchwp's item ID is 216029)
  ITEM_ID: 123456

  # The URL of the vendor using EDD (example: https://searchwp.com)
  VENDOR_URL: https://example.com

  # A valid URL that your purchase is registered to in EDD
  ACTIVATION_URL: ${{github.server_url}}/${{github.repository}}

  ## SearchWP Example
  # ITEM_ID: 216029
  # VENDOR_URL: https://searchwp.com
  # ACTIVATION_URL: ${{github.server_url}}/${{github.repository}}

jobs:
  update-plugin:
    name: Fetch and check versions
    runs-on: ubuntu-latest

    steps:

      # Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Use EDD API to find download link for latest version, using the EDD item ID (different for every plugin)
      - name: Get download link from EDD
        id: EDDResponse
        uses: fjogeleit/http-request-action@master
        with:
          url: '${{ env.VENDOR_URL }}/?edd_action=get_version&item_id=${{ env.ITEM_ID }}&license=${{secrets.LICENSE_KEY}}&url=${{ env.ACTIVATION_URL }}'

      # Fetch latest version of SearchWP to download
      - name: Fetch
        run: wget '${{fromJson(steps.EDDResponse.outputs.response).package}}' -O package.zip

      # Set up PHP
      - name: 'Setup PHP'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      # Install composer dependencies
      - name: Composer
        shell: bash
        run: 'composer install'

      # Get the current plugin version
      - name: 'Get Previous tag'
        id: previous_version
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      # Get new plugin version
      - name: 'Get version'
        id: new_version
        shell: bash
        run: echo "new_version=$(php .github/workflows/check.php)" >> $GITHUB_OUTPUT

      # Configure git user
      - name: 'Git config'
        if: ${{ steps.previous_version.outputs.tag != steps.new_version.outputs.new_version }}
        shell: bash
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      # Compare versions
      - name: 'Clean'
        if: ${{ steps.previous_version.outputs.tag != steps.new_version.outputs.new_version }}
        shell: bash
        run: find . -maxdepth 1 \( -name 'package.zip' -o -name 'composer.json' -o -name 'composer.lock' -o -name '.gitignore' -o -path './.git' -o -path './.github' \) -prune -o -exec rm -rf {} \;

      # Unzip the package
      - name: Unzip
        if: ${{ steps.previous_version.outputs.tag != steps.new_version.outputs.new_version }}
        uses: TonyBogdanov/zip@1.0
        with:
            args: unzip -qq ./package.zip -d .

      # You may not need this step depending on the contents of the zip
      - name: Move
        if: ${{ steps.previous_version.outputs.tag != steps.new_version.outputs.new_version }}
        shell: bash
        run: shopt -s dotglob && sudo mv ${{ env.PACKAGE_SLUG }}/* .

      - name: rm
        if: ${{ steps.previous_version.outputs.tag != steps.new_version.outputs.new_version }}
        shell: bash
        run: rm package.zip && rm -rf ${{ env.PACKAGE_SLUG }}

      - name: Commit
        if: ${{ steps.previous_version.outputs.tag != steps.new_version.outputs.new_version }}
        id: make-commit
        shell: bash
        run: |
          git add .
          git commit -m '${{ steps.new_version.outputs.new_version }}'
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Push
        if: ${{ steps.previous_version.outputs.tag != steps.new_version.outputs.new_version }}
        shell: bash
        run: |
          git push
          git tag ${{ steps.new_version.outputs.new_version }}
          git push --tags
